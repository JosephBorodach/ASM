/**
./tester -1.25, 1
./tester 1.5 1.0 - Doesn't work
./tester .1 -1.1
./tester .45 .45
 *
 * Use 128 bits
 *
 * Y's
 * -1.11: 1111100001110000101000111101011100001010001111010111000011000000
 * -1.1: 1111100001100110011001100110011001100110011001100110011010000000
 * -1.0: 1111110000000000000000000000000000000000000000000000000000000000
 * -0.5: 1111111000000000000000000000000000000000000000000000000000000000
 * -0.1: 1111111110011001100110011001100110011001100110011001100110100000
 * -0.11 1111111110001111010111000010100011110101110000101000111101100000
 * 0.11: 0000000001110000101000111101011100001010001111010111000010100100
 * 0.2: 0000000011001100110011001100110011001100110011001100110011010000
 * 0.3: 0000000100110011001100110011001100110011001100110011001100110000
 * 0.35: 0000000101100110011001100110011001100110011001100110011001100000
 * 0.4: 0000000110011001100110011001100110011001100110011001100110100000
 * 0.45: 0000000111001100110011001100110011001100110011001100110011010000
 *
 * X's
 * -1.25: 1111100100000000000000000000000000000000000000000000000000000000
 * -1.11: 1111100001110000101000111101011100001010001111010111000011000000
 * -1.1: 1111100001100110011001100110011001100110011001100110011010000000
 * -1.0: 1111110000000000000000000000000000000000000000000000000000000000
 * -0.11  1111111110001111010111000010100011110101110000101000111101100000
 * 0.1: 0000000001100110011001100110011001100110011001100110011001101000
 * 0.11
 * 0.2: 0000000011001100110011001100110011001100110011001100110011010000
 * 0.3: 0000000100110011001100110011001100110011001100110011001100110000
 * 0.35: 0000000101100110011001100110011001100110011001100110011001100000
 * 0.4: 0000000110011001100110011001100110011001100110011001100110100000
 * 0.45: 0000000111001100110011001100110011001100110011001100110011010000
 * 0.5: 0000001000000000000000000000000000000000000000000000000000000000
 * 1.0: 0000010000000000000000000000000000000000000000000000000000000000
 * 1.1: 0000010001100110011001100110011001100110011001100110011010000000
 */

 /*
  * ./tester 0.25 -1.12     -->     3
  *
  * 72057594037927936       -->     100000000000000000000000000000000000000000000000000000000
  * 9223372036854775807     -->     111111111111111111111111111111111111111111111111111111111111111
  *
  * ./tester 0.2 -0.11      -->

 /*
 gcc tester.c MBPixelCalc.s -o tester

 gcc -g tester.c MBPixelCalc.s -o tester
 gcc -S tester.c MBPixelCalc.s -o tester

 g++ -g -O -Wa,-aslh horton_ex2_05.cpp >list.txt

 gcc -S tester.c MBPixelCalc.s -o tester

 objdump -d -M intel -S tester.o

 */

/*
9223372036854775807
86469112845513520
*/

/*
_MBPixelCalc:
    pushq %r8        //
    pushq %r9        //
    pushq %r12       // iterative variable
    pushq %r13       // temp variable
    pushq %r14       // temp variable
    pushq %r15       // temp variable
    movq $0, %r8     // set x whole = 0
    movq $0, %r9     // set x decimals = 0
    movq $0, %r10    // set y whole = 0
    movq $0, %r11    // set y decimals = 0
    movq $0, %r12    // int i = 0
    mov %rdi, %r13
    mov %rsi, %r14
    pushq %rdi
    pushq %rsi
    pushq %rdx
_iterate:
    cmpq $1000, %r12 // #1
    jge _done

    mov %r10, %rdi   // #3a
    imul %r10, %rdi  // #3b
    mov %r11, %rsi   // #4a
    imul %r11, %rsi  // #4b

    mov %rdi, %rdx   // #5
    addq %rsi, %rdx

    // How do I do <=?
    cmpq $4, %rdx    // #6
    jge _done

    mov %rdi, %r15   // #7a1
    subq %rsi, %r15  // #7a2
    addq %r13, %r15   // #7a3

    imul %r10, %r11   // #7b1
    imul $2, %r11     // #7b2
    addq %r14, %r11   // #7b3

    mov %r15, %r10    // 7c1

    addq $1, %r12    // #2

    // This is probably uneccesary
    cmpq $1000, %r12 // #1
    jge _done
    jmp _iterate
_done:
    movq %r12, %rax
    popq %r8
    popq %r9
    popq %r12
    popq %r13
    popq %r14
    popq %r15
    popq %rdi
    popq %rsi
    popq %rdx
    ret
*/

// 7) Calculations
//      a) int temp = (x * x) - (y * y) + x0;
//          1. Move (x * x) into %r15
//          2. Subtract %r15 by (y * y)
//          3. Add x0 to %r15
//      b) y = (2 * x * y) + y0; y is %r11
//          1. Multiply %r11 by x, which is %r10
//          2. Multiply %r11 by 2
//          3. Add y0, which is %r14, to %r11
//      c) x = temp;
//          1. Set %r10 to %r15
//
gdb --args ./nameofexcutable arg1 arg2
break 1
Tui enable
Tui reg general
Gdb run

